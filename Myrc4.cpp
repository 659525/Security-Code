#include "pch.h"
#include <windows.h>
#include <stdlib.h>
#include <string>
#include "time.h"

//------------------------------------------------------------
//-----------       Created with 010 Editor        -----------
//------         www.sweetscape.com/010editor/          ------
//加密前的源数据
// File    : E:\²¡¶¾·ÖÎö\windows-\2019-07\result\ÎÞ¿Ç\·ÖÎöÖÐ\1.txt
// Address : 0 (0x0)
// Size    : 473 (0x1D9)
//------------------------------------------------------------
unsigned char SourceData[473] = {
0x4B, 0x75, 0x47, 0x6F, 0x75, 0xD9, 0x01, 0x00, 0x00, 0xC8, 0x01, 0x00, 0x00, 0x66, 0x00, 0xC1,
0x51, 0x9C, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xB1, 0x1D, 0x00,
0x00, 0x02, 0x00, 0x00, 0x00, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x50, 0x61, 0x63,
0x6B, 0x20, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD3, 0x5D, 0x05, 0x77, 0x1B, 0xE1, 0x95,
0x77, 0x00, 0x00, 0x00, 0x00, 0xA4, 0x03, 0x5A, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x50, 0x01, 0x5A,
0x00, 0x47, 0x20, 0x01, 0x00, 0x10, 0x55, 0x12, 0x00, 0xF8, 0x28, 0x5A, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x2F, 0xB9,
0x74, 0x50, 0x01, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE8, 0xF5, 0x5A, 0x00, 0xA4, 0x00, 0x00,
0x00, 0x40, 0x01, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00,
0x00, 0xF8, 0x53, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00,
0x00, 0x0C, 0x54, 0x12, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x1E, 0x77, 0x0C, 0x00,
0x00, 0x31, 0x00, 0xB9, 0x74, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x07, 0x00, 0x00, 0x58, 0x55, 0x12,
0x00, 0x40, 0x01, 0x00, 0x41, 0xC0, 0xA8, 0x02, 0xEA, 0x57, 0x49, 0x4E, 0x2D, 0x44, 0x43, 0x53,
0x45, 0x4C, 0x41, 0x46, 0x30, 0x36, 0x52, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0xFF, 0x0B, 0x00,
0x00, 0xFD, 0xEF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA7, 0xF7, 0x00, 0x00, 0x30, 0x37, 0x30,
0x33, 0x00, 0x5A, 0x05, 0x77, 0x14, 0x02, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0xE2, 0xF5, 0x5A,
0x00, 0xE0, 0xF5, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x40, 0x17, 0x1C, 0x00, 0x7D, 0x2F, 0x1F, 0x77, 0x28, 0xBA, 0x74, 0x17, 0x58, 0x55, 0x32,
0x30, 0x31, 0x39, 0x2D, 0x30, 0x37, 0x2D, 0x31, 0x39, 0x20, 0x31, 0x34, 0x3A, 0x30, 0x37, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0xC4, 0xAC, 0xC8, 0xCF, 0xB7, 0xD6, 0xD7, 0xE9, 0x00, 0x57, 0x12, 0x00, 0x0C, 0x00, 0x00,
0x00, 0x03, 0x00, 0x00, 0x00, 0x24, 0x6A, 0x04, 0x77, 0x9C, 0x17, 0x3D, 0x75, 0x6C, 0x01, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0xC4, 0x17, 0x3D, 0x75, 0x64, 0x9E, 0x3A, 0x73, 0x00, 0x00, 0x00,
0x00, 0x6C, 0x01, 0x30, 0xCC, 0xEC, 0x32, 0xCA, 0xB1, 0x33, 0x35, 0xB7, 0xD6, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE8, 0xF5, 0x5A,
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1C, 0x00, 0x00
};

//------------------------------------------------------------
//-----------       Created with 010 Editor        -----------
//------         www.sweetscape.com/010editor/          ------
//加密后的数据
// File    : E:\²¡¶¾·ÖÎö\windows-\2019-07\result\ÎÞ¿Ç\·ÖÎöÖÐ\1-Encrypt.txt
// Address : 0 (0x0)
// Size    : 473 (0x1D9)
//------------------------------------------------------------
unsigned char CryptData[473] = {
0xD5, 0x67, 0xEC, 0xCB, 0xA6, 0x87, 0x03, 0xE4, 0x55, 0xC1, 0x94, 0x74, 0x28, 0x5E, 0x2F, 0xCE,
0x6E, 0xAD, 0xA4, 0x44, 0x98, 0xBB, 0x8E, 0xCC, 0x81, 0xBF, 0x62, 0x52, 0x74, 0xFB, 0x50, 0xB1,
0x27, 0xE0, 0x78, 0xF1, 0x2C, 0x3C, 0x89, 0xE7, 0x9A, 0x34, 0xE9, 0x6C, 0x2F, 0x1E, 0x9D, 0xED,
0x04, 0xA6, 0x85, 0xB7, 0xD1, 0x16, 0xF8, 0x48, 0xAD, 0x01, 0xB6, 0x93, 0x07, 0x98, 0x3E, 0x44,
0x6D, 0x43, 0x93, 0xF0, 0x74, 0x5A, 0x67, 0x32, 0x2A, 0xDD, 0xBA, 0x75, 0xCA, 0xE4, 0x76, 0x9D,
0x16, 0x55, 0x30, 0x0B, 0x27, 0x51, 0xBB, 0x55, 0x72, 0xB2, 0x63, 0xA1, 0xA4, 0xE2, 0x82, 0x11,
0x82, 0x8A, 0x5C, 0x4A, 0x3A, 0x2A, 0x06, 0x50, 0x0E, 0xD4, 0x82, 0x91, 0xC9, 0x06, 0xAF, 0x0A,
0xE1, 0xE7, 0x58, 0x39, 0xCE, 0x78, 0x66, 0x8F, 0xD0, 0x6F, 0xC0, 0xB4, 0x6B, 0x1E, 0xB6, 0xE0,
0xE2, 0x96, 0x9C, 0xBF, 0xD5, 0x30, 0x7F, 0xA5, 0x4B, 0x87, 0x0A, 0xBE, 0x45, 0xDE, 0x11, 0x66,
0x59, 0x8B, 0x5F, 0x98, 0x83, 0x3E, 0xB8, 0xC0, 0x7F, 0xD0, 0xA8, 0x35, 0x62, 0x61, 0xCD, 0x06,
0xD5, 0x0B, 0xA7, 0x3F, 0x35, 0x38, 0xF7, 0x16, 0xAA, 0xAF, 0x96, 0x23, 0x1E, 0xFC, 0x3F, 0xD5,
0x5D, 0x97, 0x66, 0x1E, 0x28, 0xB4, 0xC2, 0x0F, 0x88, 0xFF, 0x21, 0x38, 0x83, 0x0D, 0x58, 0x19,
0xFD, 0xE2, 0xD7, 0xE5, 0xB7, 0xC4, 0x6E, 0x00, 0xA4, 0xF0, 0x43, 0x20, 0xE6, 0x6C, 0x10, 0x85,
0x75, 0x04, 0x6D, 0xF1, 0x0C, 0x7D, 0x76, 0x97, 0x3E, 0x35, 0xD8, 0x11, 0x88, 0xD8, 0x13, 0xED,
0x8E, 0xA8, 0x73, 0x1F, 0x5E, 0x65, 0x22, 0xF8, 0xE7, 0xFF, 0x8B, 0x52, 0xD6, 0x69, 0x8A, 0x83,
0xB3, 0xD3, 0x98, 0x37, 0xF7, 0x2B, 0x03, 0x3D, 0x8F, 0xF7, 0x66, 0xA2, 0x66, 0x24, 0x47, 0x2D,
0x8C, 0x18, 0x2B, 0xBD, 0x6B, 0xCD, 0x7F, 0x6F, 0x2A, 0x45, 0x22, 0x43, 0xB0, 0x2C, 0x32, 0xDA,
0x98, 0xBB, 0x61, 0x33, 0xF3, 0x1D, 0xF1, 0x30, 0x13, 0xB0, 0x34, 0x2E, 0x7F, 0xB7, 0x15, 0xBB,
0xAE, 0xAE, 0x5C, 0x55, 0x60, 0x40, 0x81, 0x69, 0x2E, 0x39, 0x44, 0xC8, 0x50, 0x86, 0x33, 0xBD,
0xC8, 0x9E, 0x00, 0x3E, 0xF4, 0x1B, 0xD9, 0xCE, 0x95, 0xB4, 0xF5, 0x86, 0xF7, 0xB2, 0xC0, 0x83,
0x59, 0xC5, 0x62, 0x85, 0x26, 0x3C, 0x31, 0xEA, 0xBB, 0x6A, 0x97, 0x4F, 0xEA, 0x00, 0x38, 0x40,
0x2D, 0xE5, 0x60, 0x6F, 0x43, 0xDB, 0x88, 0x63, 0x71, 0x3F, 0xCC, 0xB3, 0x0F, 0xB8, 0xD0, 0x6A,
0x65, 0xA7, 0x96, 0xB2, 0xA3, 0x06, 0x28, 0x62, 0xF7, 0x49, 0xF2, 0x9E, 0x80, 0x10, 0xFD, 0xD1,
0xE7, 0x82, 0x3B, 0xE7, 0xD3, 0x89, 0x5C, 0x22, 0x5D, 0xB4, 0x66, 0x68, 0x50, 0x25, 0xC0, 0xD3,
0xD0, 0xD3, 0xDB, 0xD9, 0x64, 0x3E, 0x84, 0x40, 0x15, 0x65, 0xE7, 0xFC, 0x0B, 0x64, 0x6A, 0xFD,
0xC4, 0x57, 0x53, 0x6D, 0xAA, 0x1E, 0x5D, 0xBE, 0x58, 0x2F, 0xC7, 0x7A, 0xF7, 0x4C, 0x0C, 0x16,
0xEF, 0xAD, 0xF6, 0x72, 0xE4, 0x24, 0xB7, 0x9C, 0xF7, 0xE5, 0x2A, 0x14, 0xE1, 0x11, 0x83, 0xB3,
0x9A, 0x42, 0x82, 0x96, 0x64, 0x66, 0xFF, 0x42, 0x77, 0x5A, 0x7E, 0xCC, 0x09, 0x78, 0xE3, 0x2E,
0x41, 0xD0, 0xB2, 0xFE, 0x13, 0x41, 0xEB, 0x4D, 0xA0, 0xCD, 0xD0, 0x82, 0x3A, 0x0F, 0x97, 0x9E,
0x07, 0x05, 0x1F, 0xF9, 0x5E, 0x03, 0xBE, 0x3B, 0xEE
};


//------------------------------------------------------------
//-----------       Created with 010 Editor        -----------
//------         www.sweetscape.com/010editor/          ------
//加密前的密码表
// File    : E:\²¡¶¾·ÖÎö\windows-\2019-07\result\ÎÞ¿Ç\·ÖÎöÖÐ\2.txt
// Address : 0 (0x0)
// Size    : 256 (0x100)
//------------------------------------------------------------
unsigned char EncryptTable[256] = {
0x17, 0x67, 0x9F, 0xDB, 0x31, 0x4D, 0x86, 0x18, 0xFE, 0x73, 0xE8, 0x5C, 0xFD, 0x71, 0x13, 0x7F,
0xCA, 0x47, 0x8C, 0xCB, 0xD3, 0x54, 0x4A, 0x19, 0x4B, 0x20, 0x07, 0x3B, 0x83, 0xE9, 0xD4, 0x78,
0xCE, 0x99, 0x63, 0x41, 0xC6, 0x12, 0xB5, 0x9E, 0x7C, 0xF4, 0x49, 0xA7, 0x03, 0x66, 0x95, 0x40,
0x93, 0xF3, 0x46, 0x94, 0x51, 0x24, 0xCF, 0x27, 0x2B, 0xDC, 0xEA, 0xB0, 0x44, 0x84, 0xF8, 0x32,
0xAA, 0xD6, 0x53, 0x81, 0x14, 0x04, 0x7A, 0x89, 0x33, 0x96, 0x22, 0x01, 0x62, 0x28, 0xED, 0x42,
0x09, 0x55, 0xB7, 0x9D, 0x65, 0xAF, 0xDD, 0x2E, 0xEB, 0x57, 0x60, 0x79, 0x4C, 0x7E, 0x8F, 0xC7,
0x1C, 0x00, 0x02, 0x72, 0x92, 0x0F, 0xBC, 0xC0, 0xA5, 0x0B, 0x8D, 0xBD, 0x36, 0xB2, 0x0C, 0x68,
0x6A, 0x11, 0x1B, 0xAE, 0xE5, 0x38, 0x1E, 0x88, 0xDA, 0x3C, 0xEF, 0xB1, 0xF7, 0xAC, 0xA1, 0xC9,
0x0E, 0x58, 0xEE, 0x91, 0xBE, 0xB4, 0x77, 0xDE, 0xC8, 0xBA, 0x5F, 0x2A, 0xA0, 0xA6, 0xAD, 0x3F,
0xE6, 0x34, 0x8E, 0x6B, 0x15, 0x9B, 0xF6, 0xD7, 0x1F, 0xC4, 0xA8, 0x76, 0xB9, 0x98, 0x39, 0x06,
0x6F, 0x82, 0xBB, 0x9C, 0xC3, 0xB6, 0x61, 0x6E, 0x64, 0x25, 0x5D, 0xB8, 0xCC, 0x52, 0x2C, 0xE1,
0x1D, 0x10, 0x59, 0x97, 0xF5, 0x56, 0x85, 0xC2, 0x26, 0x80, 0x69, 0x7B, 0xFA, 0xA4, 0x6C, 0xD0,
0xE7, 0x43, 0xE2, 0xCD, 0xDF, 0xFF, 0x23, 0x16, 0xD1, 0x30, 0x08, 0xD2, 0x5E, 0x7D, 0x74, 0x3D,
0xE0, 0xE4, 0xC1, 0x5A, 0xAB, 0x0A, 0x3E, 0x37, 0xF2, 0xBF, 0xF0, 0x2F, 0x48, 0xE3, 0x87, 0x05,
0xC5, 0xF9, 0x90, 0x1A, 0x0D, 0xB3, 0xD8, 0xD9, 0xFC, 0xD5, 0x50, 0x21, 0x8B, 0xA2, 0x3A, 0xFB,
0x45, 0x5B, 0x29, 0x8A, 0xEC, 0x4E, 0x70, 0x9A, 0x4F, 0xA3, 0xF1, 0x75, 0xA9, 0x35, 0x2D, 0x6D
};

//------------------------------------------------------------
//-----------       Created with 010 Editor        -----------
//------         www.sweetscape.com/010editor/          ------
//加密后的密码表，可用于解密时的校验
// File    : E:\²¡¶¾·ÖÎö\windows-\2019-07\result\ÎÞ¿Ç\·ÖÎöÖÐ\2-Encrypt.txt
// Address : 0 (0x0)
// Size    : 256 (0x100)
//------------------------------------------------------------
unsigned char ChcekTable[256] = {
0xEF, 0x68, 0x28, 0xA8, 0x13, 0x5C, 0x5E, 0xE3, 0x8F, 0x9B, 0x56, 0x50, 0x8C, 0x35, 0x0A, 0x5F,
0x72, 0x1A, 0x4E, 0x14, 0xAF, 0x7B, 0xDD, 0x63, 0x6E, 0x76, 0x80, 0x4A, 0xBE, 0xD4, 0x6D, 0x40,
0xF1, 0xC4, 0x0B, 0xCC, 0x3C, 0x92, 0x5D, 0x57, 0xA4, 0x2F, 0xBA, 0x83, 0xE4, 0xC0, 0x10, 0xAD,
0xA0, 0xE0, 0xF5, 0x90, 0x29, 0xDA, 0x37, 0x9A, 0xEE, 0x89, 0xEA, 0xE1, 0x1E, 0x0E, 0x7E, 0x51,
0xEB, 0xAA, 0xA2, 0x75, 0xB8, 0xE9, 0xC6, 0x95, 0xBC, 0x74, 0x4B, 0xD3, 0x4D, 0xB6, 0x5A, 0xF8,
0x23, 0x03, 0x1F, 0xFC, 0xC5, 0xDB, 0x25, 0x36, 0x09, 0x94, 0x66, 0x4F, 0x96, 0x87, 0x11, 0xBD,
0x2C, 0x05, 0xD5, 0x6B, 0x26, 0xB9, 0x77, 0xCA, 0x5B, 0x41, 0x7A, 0x79, 0x12, 0x22, 0xE8, 0x91,
0x17, 0xFF, 0x1D, 0x31, 0xB0, 0x18, 0x67, 0xA1, 0x20, 0xED, 0x6A, 0x24, 0xA6, 0x7F, 0xE5, 0x06,
0x08, 0x27, 0x86, 0x55, 0x0F, 0x2E, 0x43, 0x88, 0xFB, 0x52, 0x9D, 0x93, 0x59, 0x21, 0x70, 0x30,
0x69, 0xB2, 0xA3, 0x1C, 0xC8, 0xF4, 0xC1, 0xF0, 0xB3, 0x0C, 0xF3, 0x53, 0x8E, 0xB7, 0xD9, 0xDC,
0x81, 0xCD, 0x0D, 0xD1, 0x00, 0xAB, 0x2B, 0xFD, 0x97, 0xB1, 0x7D, 0xBF, 0x3A, 0xAC, 0x9E, 0xAE,
0xC2, 0x47, 0x99, 0xD6, 0xB4, 0x78, 0xA5, 0x62, 0x9F, 0xF6, 0x34, 0xA7, 0xD7, 0x64, 0x2A, 0x54,
0x49, 0x9C, 0xE7, 0x84, 0x3D, 0x8D, 0x60, 0x7C, 0x16, 0x38, 0x98, 0xBB, 0x19, 0x8A, 0x61, 0x42,
0xDE, 0xFA, 0x3E, 0x73, 0xB5, 0x3B, 0x2D, 0xE2, 0x3F, 0x33, 0xD8, 0xD0, 0xC3, 0x65, 0x39, 0xC7,
0xE6, 0xF2, 0x07, 0x58, 0x01, 0x8B, 0x85, 0x71, 0xDF, 0x46, 0x6C, 0x02, 0x82, 0x48, 0x45, 0xCB,
0x1B, 0xF9, 0xF7, 0x04, 0x4C, 0x44, 0x32, 0xCF, 0xA9, 0xEC, 0xFE, 0x15, 0x6F, 0xCE, 0xD2, 0xC9
};


//-------------加密函数-------------
//参数说明：参数1：被加密数组，参数2：密码表(S盒)数组，参数三：加密长度，参数四：S盒的长度,默认0x100
//备注：使用unsigned 为了防止异或结果错误。
//返回值：true/false函数是否执行成功 
//对参数影响：将参数一进行加密  将参数二S盒内数组的顺序打乱为CheckTable，用于校验
//其他说明：会在本地生成Key盒S和校验盒S2
//生成时间：2019年7月18日17:12:48；最后一次修改：2020年10月13日16:37:13
//-------------RC4加密-------------
bool EncryptFunc(unsigned char *SourceBytes, unsigned char *EncryptBytes, DWORD nLength,DWORD SLength=0x100)
{
	//加密前，保存S盒，用于作为解密的Key
	FILE *p1;
	fopen_s(&p1, "S1", "wb+");
	if (!p1)
	{
		return false;
	}
	char Slen1[4];
	snprintf(Slen1, 10, "%d", SLength);
	fwrite(Slen1, 4, 1, p1);
	fwrite(EncryptBytes, SLength, 1, p1);
	fclose(p1);
	//

	DWORD nOffsetNum = 0, nTargetNum = 0, nLastNum = 0;
	unsigned char TargetCode = '\x0', OffsetCode = '\x0', LastCode = '\x0';
	for (DWORD i = 0; i < nLength; i++)
	{
		//取密码表标志位Code +1表示S盒起点为数组的S[1]开始.这个位置可以随意更改
		TargetCode = EncryptBytes[((i + 1) % SLength)];
		//取偏移Code的偏移
		nOffsetNum = (TargetCode + nOffsetNum) % SLength;
		//取密码表(S盒)偏移Code,用于等下S盒交换时，保存临时的变量
		OffsetCode = EncryptBytes[nOffsetNum];
		//交换密码表(S盒)数值
		EncryptBytes[nOffsetNum % SLength] = EncryptBytes[((i + 1) % SLength)];
		EncryptBytes[((i + 1) % SLength)] = OffsetCode;
		//取最终加密Code偏移
		nLastNum = (TargetCode + OffsetCode) % SLength;
		//获取异或用的Code
		LastCode = EncryptBytes[nLastNum];
		//取被加密的字符,异或
		SourceBytes[i] ^= LastCode;
	}

	//加密后，保存S盒，用于作为解密的校验和
	FILE *p2;
	fopen_s(&p2, "S2", "wb+");
	if (!p2)
	{
		return false;
	}
	char Slen2[4];
	snprintf(Slen2, 10, "%d", SLength);
	fwrite(Slen2, 4, 1, p1);
	fwrite(EncryptBytes, SLength, 1, p2);
	fclose(p2);
	//

	//在此下断观察SourceBytes和CryptData
	return true;
}

//-------------加密函数-------------
//参数说明：参数1：被加密数组，参数2：解密长度
//备注：使用unsigned 为了防止异或结果错误。
//返回值：true/false函数是否执行成功 
//对参数影响：将参数1进行解密  
//读取本地文件的Key盒S和形变后的校验盒S2
//生成时间：2019年7月18日17:12:48；最后一次修改：2020年10月13日16:37:13
//-------------RC4解密-------------
bool DecryptFunc(unsigned char *SourceBytes, DWORD nLength)
{
	//解密前，读取S1盒，用于作为解密的Key
	FILE *p1;
	fopen_s(&p1, "S1", "rb+");
	if (!p1)
	{
		return false;
	}
	char Slen1[4];
	fread_s(Slen1,4, 1, 4, p1);
	const int SLength = atoi(Slen1);
	if (!SLength)
	{
		printf("ERROR :SLength is zero\n");
		return false;
	}
	unsigned char* EncryptBytes = new unsigned char[SLength];
	fread_s(EncryptBytes, SLength, 1, SLength, p1);
	fclose(p1);
	//
	DWORD nOffsetNum = 0, nTargetNum = 0, nLastNum = 0;
	unsigned char TargetCode = '\x0', OffsetCode = '\x0', LastCode = '\x0';
	for (DWORD i = 0; i < nLength; i++)
	{
		//取密码表标志位Code
		TargetCode = EncryptBytes[((i + 1) % SLength)];
		//取偏移Code的偏移
		nOffsetNum = (TargetCode + nOffsetNum) % SLength;
		//取密码表偏移Code
		OffsetCode = EncryptBytes[nOffsetNum];
		//交换密码表数值
		EncryptBytes[nOffsetNum % SLength] = EncryptBytes[((i + 1) % SLength)];
		EncryptBytes[((i + 1) % SLength)] = OffsetCode;
		//取最终加密Code偏移
		nLastNum = (TargetCode + OffsetCode) % SLength;
		//获取异或用的字符串
		LastCode = EncryptBytes[nLastNum];
		//取被加密的字符,异或
		SourceBytes[i] ^= LastCode;
	}

	//解密后，读取S2盒，用于作为解密的校验和
	FILE *p2;
	fopen_s(&p2, "S2", "rb+");
	if (!p2)
	{
		return false;
	}
	char Slen2[4];
	fread_s(Slen2, 4, 1, 4, p2);
	const int SLength2 = atoi(Slen2);
	if (!SLength2||SLength!=SLength2)
	{
		printf("ERROR :SLength2 is zero\n");
		delete[]EncryptBytes;
		EncryptBytes = NULL;
		return false;
	}
	unsigned char* S2 = new unsigned char[SLength2];
	fread_s(S2, SLength2, 1, SLength2, p2);
	fclose(p2);
	//
	//校验部分：
	BOOL ChckeFlag = 1;
	for (int i=0;i<SLength;i++)
	{
		if (EncryptBytes[i]!=S2[i])
		{
			ChckeFlag = 0;
			break;
		}
	}
	delete[]EncryptBytes;
	delete[]S2;
	EncryptBytes = NULL;
	S2 = NULL;
	if (ChckeFlag==0)
	{
		printf("CheckFalg is false,Decrpyt failed!");
		return 0;
	}
	return 1;
}

//生成一个默认0x100大小的随机数(不重复不含0)密码表（S盒大小可变建议最小不低于0x50）
//参数说明：参数1：密码表长度，默认S盒大小为0x100
//备注：使用unsigned 为了防止异或结果错误。
//返回值与：返回一个new出来的S盒密码表的指针，用完需要delete释放
//对参数影响：参数为const int类型,用于new时分配空间
//修改时间：2020年10月13日16:02:29；最后一次修改：NOP
unsigned char* InitSrandTable(const int nLength=0x100) {
	srand((unsigned)time(NULL));
	//生成1个0x100的不重复随机数组
	unsigned char* STable = new unsigned char[nLength];
	memset(STable, 0, 0x100);
	unsigned char Temp;
	for (int i=0;i< nLength;i++)
	{
		STable[i] = i;
	}
	for (int i=0;i< nLength;i++)
	{
		Temp = rand()%nLength+1;//取随机数[0-0xFF]
		//开始交换a=a+b; b=a-b;a=a-b;
		STable[i] = STable[i]+ STable[Temp];
		STable[Temp] = STable[i] - STable[Temp];
		STable[i] = STable[i] - STable[Temp];
	}	
	//打印检验输出
	/*
	for (int i=0;i<nLength;i++)
	{
		printf("%02X ", STable[i]);
	}
	*/
	return STable;
}

int main()
{

	unsigned char*SKey=InitSrandTable();
	//加密
	DWORD nLength = 0;
	nLength = sizeof(SourceData);
	//加密后EncryptTable会变成ChcekTable，由于加密解密使用的Key一样，因此解密时判断两次生成的CheckTable是否一致即可
	EncryptFunc(SourceData, SKey, nLength);

	//解密
	if (DecryptFunc(SourceData, nLength)) {
		printf("Decrypt success!\n");
	}
	return 0;
}